# -*- coding: utf-8 -*-
"""InteroStore2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1RumJXEOpnY_bw5BXogHUPAOqUyLGG_Oj
"""

import pandas as pd  ## for data manipulation
import numpy as np  ## for mathematical operations
import matplotlib.pyplot as plt  ## for plotting graphs
from sklearn.preprocessing import MinMaxScaler  ## for scaling the data
from sklearn.cluster import KMeans  ## for clustering analysis
from sklearn.cluster import SpectralClustering  ## for Spectral clustering
from sklearn.metrics import silhouette_score  ## for silhouette score

## connect drive to colab
from google.colab import drive
drive.mount('/content/drive')

## Loading the dataset
data = pd.read_csv("/content/drive/MyDrive/Copia di store2_full.csv")
print(f'Number of rows: {data.shape[0]} and number of columns: {data.shape[1]} in the raw data')

correlation_matrix = data.corr()

print(correlation_matrix)

## removing outliers from the data, may need to change the threshold values (sentire con Rocco)
data = data[data['distance_aoi'] > 0.4]
data = data[data['distance'] > 100]
print(f'Number of rows: {data.shape[0]} and number of columns: {data.shape[1]} in the data after removing outliers')

## correcting data types of date columns
data['time_start_aoi'] = pd.to_datetime(data['time_start_aoi'])
data['time_end_aoi'] = pd.to_datetime(data['time_end_aoi'])
data['time_start_full'] = pd.to_datetime(data['time_start_full'])
data['time_end_full'] = pd.to_datetime(data['time_end_full'])

## creating new columns to calculate duration between start and end time
data['duration_full'] = (data['time_end_full'] - data['time_start_full']).dt.total_seconds()
data['duration_aoi'] = (data['time_end_aoi'] - data['time_start_aoi']).dt.total_seconds()

## day of the week

data['day_of_week'] = data['time_start_aoi'].dt.dayofweek

## creating a dataframe with the required columns for sector analysis

sector_df = pd.DataFrame(data['sector'].value_counts())  ## number of records per sector
sector_df = sector_df.reset_index()
sector_df.columns = ['sector', 'total_trips']

# da eliminare sector_df['unique_people'] = data.groupby('sector')['id_people_rtls'].nunique().values  ## number of unique people per sector
sector_df['avg_duration'] = data.groupby('sector')['duration_aoi'].mean().values  ## average duration per sector
sector_df['avg_distance'] = data.groupby('sector')['distance_aoi'].mean().values  ## average distance per sector
sector_df['basket_count'] = data[data['description'] == 'Basket']['sector'].value_counts().sort_index().values  ## number of baskets per sector
sector_df['cart_count'] = data[data['description'] == 'Cart']['sector'].value_counts().sort_index().values  ## number of carts per sector

# Create a dictionary of dataframes for each day of the week
days = ['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday']
dfs = {}
for day in days:
    df = data[data['day_of_week'] == days.index(day)]['sector'].value_counts().sort_index()
    dfs[day] = df

## number of trips per day per sector
days = ['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday']
dfs = {}
for day in days:
    df = data[data['day_of_week'] == days.index(day)]['sector'].value_counts().sort_index()
    dfs[f'{day}_trips'] = df

    
# Concatenate the dataframes and reindex to fill missing values with zeros
df = pd.concat(dfs, axis=1).fillna(0).astype(int)

## merging the dataframes
sector_df = pd.merge(sector_df, df, left_on='sector', right_index=True)

sector_df = sector_df.fillna(0)  ## filling null values with 0
sector_df

## average distance per day per sector
dfs = {}
for day in days:
    df = data[data['day_of_week'] == days.index(day)].groupby('sector')['distance_aoi'].mean()
    dfs[f'{day}_avg_distance'] = df

## Concatenate the dataframes and reindex to fill missing values with zeros
df = pd.concat(dfs, axis=1).fillna(0)

## merging the dataframes
sector_df = pd.merge(sector_df, df, left_on='sector', right_index=True)


## final sector dataframe
sector_df.head(10)

## average duration per day per sector
dfs = {}
for day in days:
    df = data[data['day_of_week'] == days.index(day)].groupby('sector')['duration_aoi'].mean()
    dfs[f'{day}_avg_duration'] = df

## Concatenate the dataframes and reindex to fill missing values with zeros
df = pd.concat(dfs, axis=1).fillna(0)

## merging the dataframes
sector_df = pd.merge(sector_df, df, left_on='sector', right_index=True)


## final sector dataframe
sector_df.head()

## plotting the number of visits per day of the week for each sector

fig, ax = plt.subplots(figsize=(25, 10))
ax.bar(sector_df['sector'], sector_df['monday_trips'], label='monday')
ax.bar(sector_df['sector'], sector_df['tuesday_trips'], bottom=sector_df['monday_trips'], label='tuesday')
ax.bar(sector_df['sector'], sector_df['wednesday_trips'], bottom=sector_df['monday_trips'] + sector_df['tuesday_trips'], label='wednesday')
ax.bar(sector_df['sector'], sector_df['thursday_trips'], bottom=sector_df['monday_trips'] + sector_df['tuesday_trips'] + sector_df['wednesday_trips'], label='thursday')
ax.bar(sector_df['sector'], sector_df['friday_trips'], bottom=sector_df['monday_trips'] + sector_df['tuesday_trips'] + sector_df['wednesday_trips'] + sector_df['thursday_trips'], label='friday')
ax.bar(sector_df['sector'], sector_df['saturday_trips'], bottom=sector_df['monday_trips'] + sector_df['tuesday_trips'] + sector_df['wednesday_trips'] + sector_df['thursday_trips'] + sector_df['friday_trips'], label='saturday')
ax.bar(sector_df['sector'], sector_df['sunday_trips'], bottom=sector_df['monday_trips'] + sector_df['tuesday_trips'] + sector_df['wednesday_trips'] + sector_df['thursday_trips'] + sector_df['friday_trips'] + sector_df['saturday_trips'], label='sunday')
ax.set_ylabel('Number of visits')
ax.set_xlabel('Sector')
ax.set_title('Number of visits per day of the week for each sector')
ax.legend()
plt.xticks(rotation=90)
plt.savefig('visits_per_day.png')
plt.show()

## plotting the number of baskets and carts per sector

fig, ax = plt.subplots(figsize=(17, 10))
ax.bar(sector_df['sector'], sector_df['basket_count'], label='Baskets')
ax.bar(sector_df['sector'], sector_df['cart_count'], bottom=sector_df['basket_count'], label='Carts')
ax.set_xlabel('Sector')
ax.set_ylabel('Number of baskets and carts')
ax.set_title('Number of baskets and carts per sector')
ax.legend()
plt.xticks(rotation=90)
plt.savefig('baskets_carts_per_sector.png')
plt.show()

## plotting the average duration per sector

fig, ax = plt.subplots(figsize=(20, 10))
ax.bar(sector_df['sector'], sector_df['avg_duration'])
ax.set_xlabel('Sector')
ax.set_ylabel('Average duration')
ax.set_title('Average duration per sector')
plt.xticks(rotation=90)
plt.savefig('avg_duration_per_sector.png')
plt.show()

## plotting the average distance per sector

fig, ax = plt.subplots(figsize=(20, 10))
ax.bar(sector_df['sector'], sector_df['avg_distance'])
ax.set_xlabel('Sector')
ax.set_ylabel('Average distance')
ax.set_title('Average distance per sector')
plt.xticks(rotation=90)
plt.savefig('avg_distance_per_sector.png')
plt.show()

## plotting the average distance per day of the week for each sector

fig, ax = plt.subplots(figsize=(25, 10))
ax.bar(sector_df['sector'], sector_df['monday_avg_distance'], label='monday')
ax.bar(sector_df['sector'], sector_df['tuesday_avg_distance'], bottom=sector_df['monday_avg_distance'], label='tuesday')
ax.bar(sector_df['sector'], sector_df['wednesday_avg_distance'], bottom=sector_df['monday_avg_distance'] + sector_df['tuesday_avg_distance'], label='wednesday')
ax.bar(sector_df['sector'], sector_df['thursday_avg_distance'], bottom=sector_df['monday_avg_distance'] + sector_df['tuesday_avg_distance'] + sector_df['wednesday_avg_distance'], label='thursday')
ax.bar(sector_df['sector'], sector_df['friday_avg_distance'], bottom=sector_df['monday_avg_distance'] + sector_df['tuesday_avg_distance'] + sector_df['wednesday_avg_distance'] + sector_df['thursday_avg_distance'], label='friday')
ax.bar(sector_df['sector'], sector_df['saturday_avg_distance'], bottom=sector_df['monday_avg_distance'] + sector_df['tuesday_avg_distance'] + sector_df['wednesday_avg_distance'] + sector_df['thursday_avg_distance'] + sector_df['friday_avg_distance'], label='saturday')
ax.bar(sector_df['sector'], sector_df['sunday_avg_distance'], bottom=sector_df['monday_avg_distance'] + sector_df['tuesday_avg_distance'] + sector_df['wednesday_avg_distance'] + sector_df['thursday_avg_distance'] + sector_df['friday_avg_distance'] + sector_df['saturday_avg_distance'], label='sunday')

ax.set_ylabel('Average distance')
ax.set_xlabel('Sector')
ax.set_title('Average distance per day of the week for each sector')
ax.legend()
plt.xticks(rotation=90)
# plt.savefig('avg_distance_per_day.png')
plt.show()

## scaling the data

scaler = MinMaxScaler()
data_scaled = scaler.fit_transform(sector_df[['total_trips', 'avg_duration', 'avg_distance', 'basket_count', 'cart_count']])
data_scaled = pd.DataFrame(data_scaled, columns=['total_trips', 'avg_duration', 'avg_distance', 'basket_count', 'cart_count'])
data_scaled

## Clustering Sectors

## copy of the dataset for spectral clustering using immacultae dataset
kmeans_df = sector_df.copy()
kmeans_scaled = data_scaled.copy()

## elbow curve to identify optimal number of clusters
## wcss is within cluster sum of squares. It is the sum of the squared distance between each member of the cluster and its centroid.
## the lower the wcss value, the better the clustering

wcss = []
for i in range(1, 11):
    kmeans = KMeans(n_clusters=i, init='k-means++', random_state=42)
    kmeans.fit(kmeans_scaled)
    wcss.append(kmeans.inertia_)
plt.plot(range(1, 11), wcss)  ## plotting elbow curve
plt.title('Elbow Method')
plt.xlabel('Number of clusters')
plt.ylabel('WCSS')
plt.savefig('elbow_curve.png')
plt.show()

## KMeans clustering on the data

kmeans = KMeans(n_clusters=4, init='k-means++', random_state=42)
kmeans.fit(kmeans_scaled)
kmeans_df['cluster'] = kmeans.labels_
kmeans_df

## plotting the clusters in subplots

fig, ax = plt.subplots(2, 2, figsize=(15, 10))

ax[0, 0].scatter(kmeans_df[kmeans_df['cluster'] == 0]['avg_duration'], kmeans_df[kmeans_df['cluster'] == 0]['avg_distance'], c='red', label='Cluster 1')
ax[0, 0].scatter(kmeans_df[kmeans_df['cluster'] == 1]['avg_duration'], kmeans_df[kmeans_df['cluster'] == 1]['avg_distance'], c='blue', label='Cluster 2')
ax[0, 0].scatter(kmeans_df[kmeans_df['cluster'] == 2]['avg_duration'], kmeans_df[kmeans_df['cluster'] == 2]['avg_distance'], c='green', label='Cluster 3')
ax[0, 0].scatter(kmeans_df[kmeans_df['cluster'] == 3]['avg_duration'], kmeans_df[kmeans_df['cluster'] == 3]['avg_distance'], c='black', label='Cluster 4')
ax[0, 0].set_xlabel('Average Duration')
ax[0, 0].set_ylabel('Average Distance')
ax[0, 0].set_title('Duration vs Distance')
ax[0, 0].legend()

ax[0, 1].scatter(kmeans_df[kmeans_df['cluster'] == 0]['cart_count'], kmeans_df[kmeans_df['cluster'] == 0]['basket_count'], c='red', label='Cluster 1')
ax[0, 1].scatter(kmeans_df[kmeans_df['cluster'] == 1]['cart_count'], kmeans_df[kmeans_df['cluster'] == 1]['basket_count'], c='blue', label='Cluster 2')
ax[0, 1].scatter(kmeans_df[kmeans_df['cluster'] == 2]['cart_count'], kmeans_df[kmeans_df['cluster'] == 2]['basket_count'], c='green', label='Cluster 3')
ax[0, 1].scatter(kmeans_df[kmeans_df['cluster'] == 3]['cart_count'], kmeans_df[kmeans_df['cluster'] == 3]['basket_count'], c='black', label='Cluster 4')
ax[0, 1].set_xlabel('Cart Count')
ax[0, 1].set_ylabel('Basket Count')
ax[0, 1].set_title('Carts vs Baskets')
ax[0, 1].legend()

#weekday vs weekend graphic
kmeans_df['weekday'] = kmeans_df['monday_trips'] + kmeans_df['tuesday_trips'] + kmeans_df['wednesday_trips'] + kmeans_df['thursday_trips'] + kmeans_df['friday_trips']
kmeans_df['weekend'] = kmeans_df['saturday_trips'] + kmeans_df['sunday_trips']
ax[1, 1].scatter(kmeans_df[kmeans_df['cluster'] == 0]['weekday'], kmeans_df[kmeans_df['cluster'] == 0]['weekend'], c='red', label='Cluster 1')
ax[1, 1].scatter(kmeans_df[kmeans_df['cluster'] == 1]['weekday'], kmeans_df[kmeans_df['cluster'] == 1]['weekend'], c='blue', label='Cluster 2')
ax[1, 1].scatter(kmeans_df[kmeans_df['cluster'] == 2]['weekday'], kmeans_df[kmeans_df['cluster'] == 2]['weekend'], c='green', label='Cluster 3')
ax[1, 1].scatter(kmeans_df[kmeans_df['cluster'] == 3]['weekday'], kmeans_df[kmeans_df['cluster'] == 3]['weekend'], c='black', label='Cluster 4')
ax[1, 1].set_xlabel('Weekday Trips')
ax[1, 1].set_ylabel('Weekend Trips')
ax[1, 1].set_title('Weekday vs Weekend Trips')
ax[1, 1].legend()

kmeans_df['weekday'] = kmeans_df['monday_avg_duration'] + kmeans_df['tuesday_avg_duration'] + kmeans_df['wednesday_avg_duration'] + kmeans_df['thursday_avg_duration'] + kmeans_df['friday_avg_duration']
kmeans_df['weekend'] = kmeans_df['saturday_avg_duration'] + kmeans_df['sunday_avg_duration']
ax[1, 0].scatter(kmeans_df[kmeans_df['cluster'] == 0]['weekday'], kmeans_df[kmeans_df['cluster'] == 0]['weekend'], c='red', label='Cluster 1')
ax[1, 0].scatter(kmeans_df[kmeans_df['cluster'] == 1]['weekday'], kmeans_df[kmeans_df['cluster'] == 1]['weekend'], c='blue', label='Cluster 2')
ax[1, 0].scatter(kmeans_df[kmeans_df['cluster'] == 2]['weekday'], kmeans_df[kmeans_df['cluster'] == 2]['weekend'], c='green', label='Cluster 3')
ax[1, 0].scatter(kmeans_df[kmeans_df['cluster'] == 3]['weekday'], kmeans_df[kmeans_df['cluster'] == 3]['weekend'], c='black', label='Cluster 4')
ax[1, 0].set_xlabel('Weekday Duration')
ax[1, 0].set_ylabel('Weekend Duration')
ax[1, 0].set_title('Weekday vs Weekend Duration')
ax[1, 0].legend()


plt.savefig('clusters.png')
plt.show()

fig.delaxes(ax[1, 1])
plt.savefig('clusters.png')
plt.show()



## count of records in each cluster

kmeans_df['cluster'].value_counts()

## records in cluster 0

kmeans_df[kmeans_df['cluster'] == 0]

## records in cluster 1

kmeans_df[kmeans_df['cluster'] == 1]

## records in cluster 2

kmeans_df[kmeans_df['cluster'] == 2]

## records in cluster 3

kmeans_df[kmeans_df['cluster'] == 3]

#Spectral Clustering
spectral_df = sector_df.copy()
spectral_scaled = data_scaled.copy()

## Spectral Clustering Implementation

spectral = SpectralClustering(n_clusters=3, affinity='nearest_neighbors')
spectral.fit(spectral_scaled)
spectral_df['cluster'] = spectral.labels_
spectral_df

## plotting the clusters in subplots

fig, ax = plt.subplots(2, 2, figsize=(15, 10))

ax[0, 0].scatter(spectral_df[spectral_df['cluster'] == 0]['avg_duration'], spectral_df[spectral_df['cluster'] == 0]['avg_distance'], c='red', label='Cluster 1')
ax[0, 0].scatter(spectral_df[spectral_df['cluster'] == 1]['avg_duration'], spectral_df[spectral_df['cluster'] == 1]['avg_distance'], c='blue', label='Cluster 2')
ax[0, 0].scatter(spectral_df[spectral_df['cluster'] == 2]['avg_duration'], spectral_df[spectral_df['cluster'] == 2]['avg_distance'], c='green', label='Cluster 3')
ax[0, 0].scatter(spectral_df[spectral_df['cluster'] == 3]['avg_duration'], spectral_df[spectral_df['cluster'] == 3]['avg_distance'], c='black', label='Cluster 4')
ax[0, 0].set_xlabel('Average Duration')
ax[0, 0].set_ylabel('Average Distance')
ax[0, 0].set_title('Duration vs Distance')
ax[0, 0].legend()

ax[0, 1].scatter(spectral_df[spectral_df['cluster'] == 0]['cart_count'], spectral_df[spectral_df['cluster'] == 0]['basket_count'], c='red', label='Cluster 1')
ax[0, 1].scatter(spectral_df[spectral_df['cluster'] == 1]['cart_count'], spectral_df[spectral_df['cluster'] == 1]['basket_count'], c='blue', label='Cluster 2')
ax[0, 1].scatter(spectral_df[spectral_df['cluster'] == 2]['cart_count'], spectral_df[spectral_df['cluster'] == 2]['basket_count'], c='green', label='Cluster 3')
ax[0, 1].scatter(spectral_df[spectral_df['cluster'] == 3]['cart_count'], spectral_df[spectral_df['cluster'] == 3]['basket_count'], c='black', label='Cluster 4')
ax[0, 1].set_xlabel('Cart Count')
ax[0, 1].set_ylabel('Basket Count')
ax[0, 1].set_title('Carts vs Baskets')
ax[0, 1].legend()

#weekday vs weekend graphic
spectral_df['weekday'] = spectral_df['monday_trips'] + spectral_df['tuesday_trips'] + spectral_df['wednesday_trips'] + spectral_df['thursday_trips'] + spectral_df['friday_trips']
spectral_df['weekend'] = spectral_df['saturday_trips'] + spectral_df['sunday_trips']
ax[1, 1].scatter(spectral_df[spectral_df['cluster'] == 0]['weekday'], spectral_df[spectral_df['cluster'] == 0]['weekend'], c='red', label='Cluster 1')
ax[1, 1].scatter(spectral_df[spectral_df['cluster'] == 1]['weekday'], spectral_df[spectral_df['cluster'] == 1]['weekend'], c='blue', label='Cluster 2')
ax[1, 1].scatter(spectral_df[spectral_df['cluster'] == 2]['weekday'], spectral_df[spectral_df['cluster'] == 2]['weekend'], c='green', label='Cluster 3')
ax[1, 1].scatter(spectral_df[spectral_df['cluster'] == 3]['weekday'], spectral_df[spectral_df['cluster'] == 3]['weekend'], c='black', label='Cluster 4')
ax[1, 1].set_xlabel('Weekday Trips')
ax[1, 1].set_ylabel('Weekend Trips')
ax[1, 1].set_title('Weekday vs Weekend Trips')
ax[1, 1].legend()

spectral_df['weekday'] = spectral_df['monday_avg_duration'] + spectral_df['tuesday_avg_duration'] + spectral_df['wednesday_avg_duration'] + spectral_df['thursday_avg_duration'] + spectral_df['friday_avg_duration']
spectral_df['weekend'] = spectral_df['saturday_avg_duration'] + spectral_df['sunday_avg_duration']
ax[1, 0].scatter(spectral_df[spectral_df['cluster'] == 0]['weekday'], spectral_df[spectral_df['cluster'] == 0]['weekend'], c='red', label='Cluster 1')
ax[1, 0].scatter(spectral_df[spectral_df['cluster'] == 1]['weekday'], spectral_df[spectral_df['cluster'] == 1]['weekend'], c='blue', label='Cluster 2')
ax[1, 0].scatter(spectral_df[spectral_df['cluster'] == 2]['weekday'], spectral_df[spectral_df['cluster'] == 2]['weekend'], c='green', label='Cluster 3')
ax[1, 0].scatter(spectral_df[spectral_df['cluster'] == 3]['weekday'], spectral_df[spectral_df['cluster'] == 3]['weekend'], c='black', label='Cluster 4')
ax[1, 0].set_xlabel('Weekday Duration')
ax[1, 0].set_ylabel('Weekend Duration')
ax[1, 0].set_title('Weekday vs Weekend Duration')
ax[1, 0].legend()


plt.savefig('clusters.png')
plt.show()

fig.delaxes(ax[1, 1])
plt.savefig('clusters.png')
plt.show()

## silhouette score

kmeans_silhouette = silhouette_score(kmeans_scaled, kmeans.labels_)
kmeans_silhouette

## silhouette score

spectral_silhouette = silhouette_score(spectral_scaled, spectral.labels_)
spectral_silhouette

## plot kmeans silhouette score vs spectral silhouette score

plt.figure(figsize=(6, 4))
plt.bar(['KMeans', 'Spectral'], [kmeans_silhouette, spectral_silhouette], color=['red', 'blue'])
plt.title('Silhouette Score Comparison')
plt.xlabel('Clustering Method')
plt.ylabel('Silhouette Score')
plt.savefig('silhouette.png')
plt.show()

## Spectral Clustering Implementation 2

spectral = SpectralClustering(n_clusters=4, affinity='nearest_neighbors')
spectral.fit(spectral_scaled)
spectral_df['cluster'] = spectral.labels_
spectral_df

## silhouette score

kmeans_silhouette = silhouette_score(kmeans_scaled, kmeans.labels_)
kmeans_silhouette

## silhouette score

spectral_silhouette = silhouette_score(spectral_scaled, spectral.labels_)
spectral_silhouette

## plot kmeans silhouette score vs spectral silhouette score

plt.figure(figsize=(6, 4))
plt.bar(['KMeans', 'Spectral'], [kmeans_silhouette, spectral_silhouette], color=['red', 'blue'])
plt.title('Silhouette Score Comparison')
plt.xlabel('Clustering Method')
plt.ylabel('Silhouette Score')
plt.savefig('silhouette.png')
plt.show()

## Spectral Clustering Implementation 3

spectral = SpectralClustering(n_clusters=5, affinity='nearest_neighbors')
spectral.fit(spectral_scaled)
spectral_df['cluster'] = spectral.labels_
spectral_df

## silhouette score

kmeans_silhouette = silhouette_score(kmeans_scaled, kmeans.labels_)
kmeans_silhouette

## silhouette score

spectral_silhouette = silhouette_score(spectral_scaled, spectral.labels_)
spectral_silhouette

## plot kmeans silhouette score vs spectral silhouette score

plt.figure(figsize=(6, 4))
plt.bar(['KMeans', 'Spectral'], [kmeans_silhouette, spectral_silhouette], color=['red', 'blue'])
plt.title('Silhouette Score Comparison')
plt.xlabel('Clustering Method')
plt.ylabel('Silhouette Score')
plt.savefig('silhouette.png')
plt.show()
